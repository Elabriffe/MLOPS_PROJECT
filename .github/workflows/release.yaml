name: CI Pipeline Deploy

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up Docker Compose
        run: sudo apt-get update && sudo apt-get install docker-compose -y

      - name: Build and run services with docker-compose.ci.yml
        run: |
          docker-compose -f docker-compose.ci.yaml up -d --build
          sleep 5  # attends que l'API d√©marre

      - name: Test FastAPI is responding
        run: |
          curl -f http://localhost:8000/docs || (echo "‚ùå API did not respond!" && exit 1)

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install Python test dependencies
        run: pip install pytest requests

      - name: Run Pytest
        run: pytest test_api.py

  lint:
    runs-on: ubuntu-latest
    needs: deploy

    steps:
      - uses: actions/checkout@v3

      - name: Install hadolint and jq
        run: |
          sudo apt-get update
          sudo apt-get install -y jq
          wget -O /usr/local/bin/hadolint https://github.com/hadolint/hadolint/releases/latest/download/hadolint-Linux-x86_64
          chmod +x /usr/local/bin/hadolint

      - name: Lint and validate Dockerfiles and Compose files
        run: |
          EXIT_CODE=0
          # ---------- Dockerfile lint ----------
          echo "üîé Linting Dockerfiles..."
          VALID_DOCKERFILES=()
          INVALID_DOCKERFILES=()
          find . -type f -name 'Dockerfile*' | while read file; do
            echo "üìÑ Checking $file"
            violations=$(hadolint --format json "$file")
            errors=$(echo "$violations" | jq '[.[] | select(.level == "error")]')
            error_count=$(echo "$errors" | jq 'length')
            if [ "$error_count" -gt 0 ]; then
              echo "‚ùå Errors in $file:"
              echo "$errors" | jq
              INVALID_DOCKERFILES+=("$file")
              EXIT_CODE=1
            else
              echo "‚úÖ $file passed"
              VALID_DOCKERFILES+=("$file")
            fi
          done
          # ---------- Docker Compose validation ----------
          echo ""
          echo "üîé Validating docker-compose files..."
          VALID_COMPOSE=()
          INVALID_COMPOSE=()
          find . -type f -name 'docker-compose*.yml' | while read file; do
            echo "üìÑ Validating $file"
            validation_output=$(docker-compose -f "$file" config 2>&1)
            if [ $? -ne 0 ]; then
              echo "‚ùå Error in $file"
              echo "$validation_output"
              INVALID_COMPOSE+=("$file")
              EXIT_CODE=1
            else
              echo "‚úÖ $file is valid"
              VALID_COMPOSE+=("$file")
            fi
          done
          # ---------- R√©sum√© ----------
          echo ""
          echo "üì¶ Lint & Validation Summary"
          echo "----------------------------"
          if [ ${#VALID_DOCKERFILES[@]} -gt 0 ]; then
            echo "‚úÖ Valid Dockerfiles:"
            for file in "${VALID_DOCKERFILES[@]}"; do
              echo "  - $file"
            done
          fi
          if [ ${#INVALID_DOCKERFILES[@]} -gt 0 ]; then
            echo "‚ùå Dockerfiles with errors:"
            for file in "${INVALID_DOCKERFILES[@]}"; do
              echo "  - $file"
            done
          fi
          if [ ${#VALID_COMPOSE[@]} -gt 0 ]; then
            echo "‚úÖ Valid docker-compose files:"
            for file in "${VALID_COMPOSE[@]}"; do
              echo "  - $file"
            done
          fi
          if [ ${#INVALID_COMPOSE[@]} -gt 0 ]; then
            echo "‚ùå docker-compose files with errors:"
            for file in "${INVALID_COMPOSE[@]}"; do
              echo "  - $file"
            done
          fi
          exit $EXIT_CODE
