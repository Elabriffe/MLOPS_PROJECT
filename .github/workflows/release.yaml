name: CI Pipeline Deploy

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up Docker Compose
        run: sudo apt-get update && sudo apt-get install docker-compose -y

      - name: Build and run services with docker-compose.ci.yml
        run: |
          docker-compose -f docker-compose.ci.yaml up -d --build
          sleep 5  # attends que l'API d√©marre

      - name: Test FastAPI is responding
        run: |
          curl -f http://localhost:8000/docs || (echo "‚ùå API did not respond!" && exit 1)

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install Python test dependencies
        run: pip install pytest requests

      - name: Run Pytest
        run: pytest test_api.py

  lint:
    runs-on: ubuntu-latest
    needs: deploy

    steps:
      - uses: actions/checkout@v3

      - name: Install hadolint and jq
        run: |
          sudo apt-get update
          sudo apt-get install -y jq
          wget -O /usr/local/bin/hadolint https://github.com/hadolint/hadolint/releases/latest/download/hadolint-Linux-x86_64
          chmod +x /usr/local/bin/hadolint

      - name: Lint all Dockerfiles (fail only on errors)
        run: |
          EXIT_CODE=0
          find . -type f -name 'Dockerfile*' | while read file; do
            echo "Linting $file"
            violations=$(hadolint --format json "$file")
            errors=$(echo "$violations" | jq '[.[] | select(.level == "error")]')
            error_count=$(echo "$errors" | jq 'length')
            if [ "$error_count" -gt 0 ]; then
              echo "‚ùå Errors found in $file:"
              echo "$errors" | jq
              EXIT_CODE=1
            else
              echo "‚úÖ No errors in $file"
            fi
          done
          exit $EXIT_CODE

      - name: Validate all docker-compose files (fail only on real errors)
        run: |
          EXIT_CODE=0
          find . -type f -name 'docker-compose*.yml' | while read file; do
            echo "üîç Validating $file"
            if ! docker-compose -f "$file" config > /dev/null 2>&1; then
              echo "‚ùå Error in $file"
              docker-compose -f "$file" config  # affichage d√©taill√© de l'erreur
              EXIT_CODE=1
            else
              echo "‚úÖ $file is valid"
            fi
          done
          exit $EXIT_CODE
